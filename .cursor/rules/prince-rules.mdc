---
description: При обработке и структуризации документа
globs: 
alwaysApply: false
---
# Руководство по структурированию HTML/XML документов и назначению классов для PrinceXML

## 1. Основные принципы структурирования

### 1.1. Семантические заголовки
- Используйте `<h1>`, `<h2>`, `<h3>` и т.д. для обозначения иерархии документа (части, главы, разделы).
- PrinceXML активно использует содержимое этих тегов для генерации контента (например, в колонтитулах через `string-set`).
- **Пример CSS для захвата заголовков:**
  ```css
  h1 { 
      string-set: parttitle content(text); /* Для названия части */
      prince-page-group: start; /* Важно для корректной работы string-set: ... start */
      /* break-before: right; /* Если часть должна начинаться с новой правой страницы */ 
  }
  h2 { 
      string-set: chaptertitle content(text); /* Для названия главы */
      prince-page-group: start; 
  }
  ```

### 1.2. Классы и ID
- **Классы (`.class`):** Для групповой стилизации и применения специфических правил PrinceXML.
  - Пример: `.subtitle { font-size: smaller; }`, `.contents { page: table-of-contents; }`
- **ID (`#id`):** Для уникальных элементов, требующих особого выделения или прямой адресации.
  - Пример: `#cover-image { ... }`

## 2. Рекомендуемая структура HTML и именование классов

### 2.1. Общая структура документа
- **Книга/Документ:**
  - `<body data-type="book">` или `<div class="book">`
- **Титульная страница / Вводные материалы:**
  - Название книги: `<h1 class="book-title">Название Книги</h1>` или `<p class="book-title">...</p>` (Если `<h1>` используется для частей, используйте класс или другой тег для заголовка книги).
  - Автор: `<p class="author">Автор</p>`
  - Издательство, год: `<p class="publisher-info">Информация</p>`
  - Аннотация: `<div class="abstract">...</div>`
- **Оглавление:**
  - `<nav class="table-of-contents" id="toc"><h2>Оглавление</h2><ul>...</ul></nav>`
  - CSS: `.table-of-contents { page: toc; }`
- **Предисловие, Введение:**
  - `<section class="preface" id="preface"><h1>Предисловие</h1>...</section>`
  - CSS: `.preface { page: preface-pages; prince-page-group: start; }`
- **Части:**
  - Обертка: `<div class="part" id="part-N">` (N - номер)
  - Заголовок: `<h1>Заголовок Части</h1>` (см. 1.1)
- **Главы:**
  - Обертка: `<section class="chapter" id="chapter-N.M">`
  - Заголовок: `<h2>Заголовок Главы</h2>` (см. 1.1)
- **Подразделы:**
  - `<h3>`, `<h4>`, и т.д.
- **Основной текст:**
  - Абзацы: `<p>`
  - Цитаты: `<blockquote><p>...</p><footer>...</footer></blockquote>`
  - Эпиграфы: `<div class="epigraph"><p>...</p><p class="epigraph-author">...</p></div>`
- **Сноски:**
  - PrinceXML автоматически обрабатывает сноски. Используйте:
    `<p>Текст с обычной сноской<span class="footnote">Это текст сноски.</span>.</p>`
  - CSS: `.footnote { prince-footnote-policy: auto; }` (или `block`, `inline`)
- **Изображения и иллюстрации:**
  - `<figure id="fig-N">
      <img src="path/to/image.jpg" alt="Описание изображения" />
      <figcaption>Рис. <span class="fig-counter"></span>. Подпись к изображению</figcaption>
    </figure>`
  - Классы: `.full-width`, `.float-left`, `.float-right`
- **Таблицы:**
  - Стандартная разметка: `<table>`, `<caption>`, `<thead>`, `<tbody>`, `<tfoot>`, `<tr>`, `<th>`, `<td>`.
  - Классы: `.data-table`, `.presentation-table`.

### 2.2. Специальные классы для стилизации и поведения
- **Колонтитулы (если стандартные h1/h2 не подходят для захвата):**
  - `<p class="running-header-part-title">Текст для колонтитула части</p>`
  - CSS: `p.running-header-part-title { string-set: parttitle content(text); }`
- **Выделение текста:** `.important`, `.warning`, `.note`, `.code-block`, `.example`.
- **Списки:** `.no-bullets`, `.roman-numerals-list`.

## 3. CSS и специфичные свойства PrinceXML

### 3.1. `@page` правила
- `@page { size: A5; margin: 20mm 15mm; }`
- `@page :first { @top-left { content: normal; } ... /* Убрать колонтитулы */ }`
- `@page :left { @top-left { content: string(parttitle, start); } ... }`
- `@page :right { @top-right { content: string(chaptertitle, start); } ... }`
- `@page toc { @bottom-center { content: counter(page, lower-roman); } }` (для оглавления)
- `@page chapter-pages:first { @top-center { content: normal; } }` (если на первой странице главы не нужен колонтитул)

### 3.2. `string-set` и `prince-page-group`
- Обязательно используйте `prince-page-group: start;` на элементах, чье содержимое вы захватываете с помощью `string-set` для корректной работы политики `start` (для отображения актуального заголовка в колонтитуле).
- **Политики извлечения для `string(имя-переменной, политика)`:**
  - `start`: (По умолчанию, если не указана) Использует значение `string-set`, которое было активно в начале текущей страницы. Это наиболее частый выбор для заголовков глав/частей, чтобы они отображались на всех страницах главы/части.
  - `first`: Использует первое значение `string-set`, установленное на текущей странице. Полезно, если на одной странице может быть несколько элементов, устанавливающих одну и ту же переменную (например, для словарей: первая словарная статья на странице).
  - `last`: Использует последнее значение `string-set`, установленное на текущей странице (например, для словарей: последняя словарная статья на странице).
  - `first-except`: Эквивалентно `start`, **кроме** той страницы, на которой `string-set` был непосредственно применен к элементу. Это позволяет, например, отображать название главы в колонтитуле на всех страницах главы, но не на той странице, где сам заголовок главы (`<h2>`) уже присутствует.
    ```css
    /* Пример использования first-except: */
    /* h2 { string-set: chaptertitle content(text); prince-page-group: start; } */
    /* @page :right { @top-right { content: string(chaptertitle, first-except); } } */
    ```
    *Примечание: Корректная работа `first-except` может зависеть от общей структуры CSS и специфики документа. Иногда может потребоваться дополнительная отладка.*

### 3.3. Разрывы страниц
- `h1, .part-start { break-before: right; /* или always, left */ }`
- `h2, .chapter-start { break-before: page; /* или right, left по необходимости */ }`
- `break-after: avoid;` и `break-inside: avoid;` для предотвращения нежелательных разрывов.

### 3.4. Счетчики
- Для нумерации рисунков, таблиц, глав (если не стандартная нумерация страниц):
  ```css
  body { counter-reset: figcounter partcounter chaptercounter; }
  h1 { counter-increment: partcounter; counter-reset: chaptercounter; }
  h2 { counter-increment: chaptercounter; }
  figure figcaption::before { content: "Рис. " counter(partcounter) "." counter(chaptercounter) "." counter(figcounter) ": "; counter-increment: figcounter; } 
  /* Это более сложный пример, обычно для рис.: counter(figcounter) */
  .fig-counter::before { content: counter(figcounter); counter-increment: figcounter; } /* Проще для вставки в span */
  ```

### 3.5. Продвинутое содержимое колонтитулов (`element()` и `flow()`)
- Стандартное `content: string(...)` или `content: "текст"` позволяет добавлять только текстовое содержимое в колонтитулы, с ограниченными возможностями стилизации (например, цвет, шрифт).
- Если в колонтитулы необходимо поместить сложно форматированный HTML (например, с изображениями, таблицами, особой разметкой), используйте функции `element()` или `flow()`.
  - **`element(ID-элемента)`**: Копирует элемент с указанным ID из основного потока документа в колонтитул. Элемент не будет отображаться в своем исходном месте.
    ```html
    <!-- В HTML документе: -->
    <!-- <div id="complex-header" style="display:none;">Содержимое для хедера</div> -->
    ```
    ```css
    /* В CSS для @page: */
    /* @top-center { content: element(complex-header); } */
    ```
    *Примечание: Элемент, взятый с помощью `element()`, удаляется из основного потока. Для повторяющихся элементов на каждой странице (как "бегущая строка") это может быть не то, что нужно, если он не генерируется скриптом или не предназначен для однократного использования.*
  - **`flow(имя-потока)` и `prince-flow: имя-потока from элемент`**: Более гибкий механизм. Элементы "отправляются" в именованный поток, а затем этот поток "размещается" в колонтитуле.
    ```css
    /* На элементе в документе, который должен пойти в колонтитул: */
    /* .running-header-content { prince-flow: "running-header-flow" from content; } */
    
    /* В CSS для @page: */
    /* @top-center { content: flow("running-header-flow"); } */
    ```
   Это позволяет стилизовать исходный элемент `.running-header-content` как обычно, и его содержимое будет отображено в колонтитуле.

## 4. Общие рекомендации
- **Семантика превыше всего:** Используйте HTML-теги по их прямому назначению.
- **Консистентность:** Придерживайтесь выбранной схемы именования и структуры.
- **Минимизируйте вложенность:** Избегайте излишних `<div>`, если можно обойтись семантическими тегами или классами на существующих элементах.
- **Документируйте CSS:** Комментируйте нетривиальные CSS-правила, особенно специфичные для PrinceXML.
- **Тестируйте:** Регулярно генерируйте PDF для проверки верстки на разных этапах.

Это руководство должно помочь в создании хорошо структурированных документов, которые легко стилизовать и обрабатывать с помощью PrinceXML. 